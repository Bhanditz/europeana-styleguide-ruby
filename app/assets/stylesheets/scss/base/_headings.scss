/* Headings */
/*Further Reading: http://typeplate.com/ */



$font-base: 16;
$line-height: 1.6;

$measure: $font-base * $line-height;

// Modular Scale Values
// http://typecast.com/blog/contrast-through-scale
$tera: 104 !default; // × 6.5
$giga: 80 !default; // × 5
$mega: 64 !default; // × 4
$alpha: 53 !default; // 3.3333
$beta: 43 !default; // 2.6667
$gamma: 32 !default; //  × 2
$delta: 21 !default; // × 1.3333
$epsilon: 19 !default; // × 1.1667
$zeta: 16 !default; //  × 1

// typscale unit
$type-scale-unit-value: rem !default;

// $Function $Context Calculator
// -------------------------------------//
// divide a given font-size by base font-size & return a relative value

@function context-calc($scale, $base, $value) {
	@return ($scale/$base)#{$value};
}

// $Function $Measure-Margin
// -------------------------------------//
// divide 1 unit of measure by given font-size & return a relative em value

@function measure-margin($scale, $measure, $value) {
	@return ($measure/$scale)#{$value};
}

// $Mixin $Type-Scale
// -------------------------------------//
// provides a pixel fallback if you decide
// to use 'rems' as a unit over ems.

@mixin type-scale($scale, $base, $value, $measure:"") {
	// If 'rem' is used as a $value then provide a px fallback.
	@if $value == rem {
		font-size: $scale#{px};
	}
	font-size: context-calc($scale, $base, $value);
	@if $measure != "" {
		margin-bottom: measure-margin($scale, $measure, $value);
	}
}

// Extend included classes on any element of your
// choosing for adjusting type based on the scale
// provided.

// For example:

// <h6 class="giga">Awesome Headline</h6>
// <p class="tera">a story about a dude</p>

// Our Type Scale is as follows with px fallbacks
// for IE 6-8 as they do not understand REM units.
//
// 18, 21, 24, 36, 48, 60, 72, 90, 117

// styles for all headings, in the style of @csswizardry
%hN {
	text-rendering: optimizeLegibility; // voodoo to enable ligatures and kerning
	line-height: 1; // this fixes huge spaces when a heading wraps onto two lines
	margin-top: 0;
	color: $textcolour_head;
	
	-ms-word-break: break-all;
	     word-break: break-all;

	/* Non standard for webkit */
	word-break: break-word;

	-webkit-hyphens: auto;
	   -moz-hyphens: auto;
	        hyphens: auto;

	letter-spacing: -0.02em;
}

// Multi-dimensional array, where:
// the first value is the name of the class
// and the second value is the variable for the size
$sizes: tera $tera, giga $giga, mega $mega, alpha $alpha, beta $beta, gamma $gamma, delta $delta, epsilon $epsilon, zeta $zeta;

// Sass loop to associate h1-h6 tags with their appropriate greek
// heading based on a modular scale.
// for each size in the scale, create a class
@each $size in $sizes {
	.#{nth($size, 1)} {
		@include type-scale(nth($size, 2), $font-base, '#{$type-scale-unit-value}', $measure);
	}
}

// associate h1-h6 tags with their appropriate greek heading
h1 {
	@extend .alpha;
	@extend %hN;
}

h1.title{
	font-family: $font-secondary;
	font-weight: 300;
}

h2 {
	@extend .beta;
	@extend %hN;
}

h3 {
	@extend .gamma;
	@extend %hN;

	font-family: $font-secondary;
	font-style: italic;
	font-weight: normal;
}

h4 {
	@extend .delta;
	@extend %hN;
}

h5 {
	@extend .epsilon;
	@extend %hN;
}

h6 {
	@extend .zeta;
	@extend %hN;

	text-transform: uppercase;
}


/* Subheadings */
.subheading {
	font-family: $font-secondary;
	font-weight: normal;
}

.label{
	font-family: inherit;
	color: $textcolour_body;
}


